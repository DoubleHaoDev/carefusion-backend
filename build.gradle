plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.2'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'maven-publish'
	id 'nu.studer.credentials' version '3.0'
	id 'checkstyle'
	id 'com.diffplug.spotless' version '6.1.2'
	id "org.sonarqube" version "4.4.1.3373"
	id "jacoco"
}

group = 'com.carefusion'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

springBoot {
	mainClass = "com.carefusion.carefusion_backend.CareFusionBackendApplication.java"
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-security'
	testImplementation 'org.springframework.security:spring-security-test'
	runtimeOnly 'org.postgresql:postgresql'
	implementation group: 'javax.inject', name: 'javax.inject', version: '1'
	annotationProcessor 'org.inferred:freebuilder:2.8.0'
	compileOnly 'org.inferred:freebuilder:2.8.0'
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
	annotationProcessor "org.mapstruct:mapstruct-processor:1.5.3.Final"
	compileOnly "org.mapstruct:mapstruct:1.5.3.Final"
	testImplementation "org.mapstruct:mapstruct:1.5.3.Final"
}

spotless {
	java {
		target 'src/main/java/**/*.java', 'src/test/java/**/*.java'

		eclipse().configFile '.formatting/eclipse-java-google-style.xml'
	}
}

checkstyle {
	toolVersion = '8.9'
	configFile = file('.formatting/google_checks.xml')
	sourceSets = [project.sourceSets.main]
}

task style {
	group 'verification'

	dependsOn checkstyleMain

	afterEvaluate() {
		dependsOn spotlessCheck
	}
}

project.tasks["sonarqube"].dependsOn jacocoTestReport

sonar {
	properties {
		property "sonar.projectKey", "DoubleHaoDev_carefusion-backend"
		property "sonar.organization", "doublehaodev"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.exclusions", "/src/main/java/com/carefusion/carefusion_backend/model/**"
		property "sonar.coverage.jacoco.xmlReportsPath", "${project.layout.buildDirectory}/reports/jacoco/jacocoTestReport.xml"
	}
}

test.finalizedBy jacocoTestReport

jacocoTestReport {
	reports {
		xml.required = true
		html.required = true
		csv.required = true
	}
}

tasks.named('test') {
	useJUnitPlatform()
}
